//
//  ViewController.swift
//  RainGuage
//
//  Created by Stephen Page on 8/27/17.
//  Copyright Â© 2017 Stephen Page. All rights reserved.
//

import UIKit
import Foundation


class ViewController: UIViewController {

    let api = "ziMIGvgahTwfkCfNuNddJzhksloolzEj"
    let baseURL = URL(string: "https://www.ncdc.noaa.gov/cdo-web/api/v2/")
    
    @IBOutlet weak var dateInput: UIDatePicker!
    @IBOutlet weak var txtZipCode: UITextField!
    
    @IBOutlet weak var txtRainfall: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    @IBAction func btnGetRain(_ sender: Any) {
        
        if isStringEmpty(inputValue: txtZipCode.text!) //== true
        {
            return
        }
        
        let zipCode = txtZipCode.text
        // need to determine station -- Could also use &locationid=ZIP:44114 but need to validate data is available in that zip code
        // OR use request station with extent and datatype parameters
        let station = "&stationid=GHCND:USW00004853" // Burke Lakefront
        
        
        // create HTTP request
        // "https://www.ncdc.noaa.gov/cdo-web/api/v2/data?datasetid=GHCND&startdate=2017-08-20&enddate=2017-08-25&stationid=GHCND%3AUSW00004853"
        var urlString = "https://www.ncdc.noaa.gov/cdo-web/api/v2/data"
        
        let dataSetId = "?datasetid=GHCND" // Daily Summaries
        // need validatidateion and assembly of dates -- Needs to be date only format 2018-01-16
        let startDate = dateInput.date.toString(dateFormat: "yyyy-MM-dd")
        let endDate = dateInput.date.toString(dateFormat: "yyyy-MM-dd")
        let limit = "&limit=100"
        
        

        // need to assemble parameters
        let dateRange = "&startdate=\(startDate)&enddate=\(endDate)"
        let parameters = dataSetId + dateRange + station + limit
        // need to attach parameters to urlString
        urlString = urlString + parameters
        
        
        // Generated by Postman
        let headers = [
            "token": "ziMIGvgahTwfkCfNuNddJzhksloolzEj",
            "cache-control": "no-cache",
            //"postman-token": "7d18bad9-581a-d845-6be7-bd60e93c8f6e"
        ]
        print(urlString)
        let request = NSMutableURLRequest(
            url: NSURL(string: urlString )! as URL,
            cachePolicy: .useProtocolCachePolicy,
            timeoutInterval: 10.0
        )
        request.httpMethod = "GET"
        request.allHTTPHeaderFields = headers
        
        let session = URLSession.shared
        let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
            guard let data  = data else { return }
            do {
                let decoder = JSONDecoder()
                let noaaData = try decoder.decode(NoaaData.self, from: data)
                print(noaaData.results[0].datatype!)
                
            } catch let err {
                print("Err", err)
            }
            
//            if (error != nil) {
//                print(error ?? "Unknown error on httpRequest")
//            } else {
//                let httpResponse = response as? HTTPURLResponse
//                print(httpResponse ?? "ERROR in response to httpResponse")
//            }
        })
        
        // Deserialize JSON
        
        dataTask.resume()
        
        // Render Result
        txtRainfall.text = "10" + "\""

    }
    
    func isStringEmpty(inputValue:String) -> Bool
    {
        var returnValue = false
        var stringValue = inputValue
        
//        if stringValue.isEmpty == true
//        {
//            returnValue = true
//            return returnValue
//        }
        // Make sure user did not submit any number of empty spaces
        stringValue = stringValue.trimmingCharacters(in: .whitespaces)
        
        if(stringValue.isEmpty == true)
        {
            returnValue = true
            return returnValue
            
        }
        return returnValue
    }
}

